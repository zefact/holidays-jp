{"version":3,"file":"holidays-jp.min.js","sources":["../src/holidays-def.ts","../src/holidays-jp.ts"],"sourcesContent":["import { Definitions } from './type';\n\n/**\n * 祝日・休業日定義\n * 1948年（昭和23年）7月20日施行以降の祝日定義\n * https://ja.wikipedia.org/wiki/国民の祝日\n *\n * 祝日・休業日タイプ： 1: 日付指定\n *      [1, '祝日・休業日名', 月, 日, 開始年, [終了年]]\n * 祝日・休業日タイプ： 2: 週曜日指定（日:0〜土:6）\n *      [2, '祝日・休業日名', 月, [週, 曜日], 開始年, [終了年]]\n * 祝日タイプ： 3:春分の日\n *      [3, '祝日名']\n * 祝日タイプ： 4:秋分の日\n *      [4, '祝日名']\n * 祝日・休業日タイプ： 9: 年月日指定\n *      [9, '祝日・休業日名', ['YYYY/MM/DD']]\n */\nconst definitions: Definitions = [\n  [1, '元日', 1, 1, 1949],\n  [1, '成人の日', 1, 15, 1949, 1999],\n  [2, '成人の日', 1, [2, 1], 2000],\n  [1, '建国記念の日', 2, 11, 1967],\n  [1, '天皇誕生日', 2, 23, 2020],\n  [1, '昭和天皇の大喪の礼', 2, 24, 1989, 1989],\n  [3, '春分の日'],\n  [1, '皇太子明仁親王の結婚の儀', 4, 10, 1959, 1959],\n  [1, '天皇誕生日', 4, 29, 1949, 1988],\n  [1, 'みどりの日', 4, 29, 1989, 2006],\n  [1, '昭和の日', 4, 29, 2007],\n  [1, '即位の日', 5, 1, 2019, 2019],\n  [1, '憲法記念日', 5, 3, 1949],\n  [1, 'みどりの日', 5, 4, 2007],\n  [1, 'こどもの日', 5, 5, 1949],\n  [1, '皇太子徳仁親王の結婚の儀', 6, 9, 1993, 1993],\n  [1, '海の日', 7, 20, 1996, 2002],\n  [2, '海の日', 7, [3, 1], 2003, 2019],\n  [1, '海の日', 7, 23, 2020, 2020],\n  [1, '海の日', 7, 22, 2021, 2021],\n  [2, '海の日', 7, [3, 1], 2022],\n  [1, '山の日', 8, 11, 2016, 2019],\n  [1, '山の日', 8, 10, 2020, 2020],\n  [1, '山の日', 8, 8, 2021, 2021],\n  [1, '山の日', 8, 11, 2022],\n  [1, '敬老の日', 9, 15, 1966, 2002],\n  [2, '敬老の日', 9, [3, 1], 2003],\n  [4, '秋分の日'],\n  [1, '体育の日', 10, 10, 1966, 1999],\n  [2, '体育の日', 10, [2, 1], 2000, 2019],\n  [1, 'スポーツの日', 7, 24, 2020, 2020],\n  [1, 'スポーツの日', 7, 23, 2021, 2021],\n  [2, 'スポーツの日', 10, [2, 1], 2022],\n  [1, '即位礼正殿の儀', 10, 22, 2019, 2019],\n  [1, '文化の日', 11, 3, 1948],\n  [1, '即位礼正殿の儀', 11, 12, 1990, 1990],\n  [1, '勤労感謝の日', 11, 23, 1948],\n  [1, '天皇誕生日', 12, 23, 1989, 2018],\n];\n\nexport default definitions;\n","import definitions from './holidays-def';\nimport { Definition, Definitions } from './type';\n\n/** 休業日設定 */\nlet _workingDefinitions: Definitions = [];\n\n/**\n * 渡された日付が祝日かどうかを返す（振替休日・国民の休日を除く）\n * @param date 対象日付\n * @returns 祝日の場合は祝日名。それ以外は空文字。\n */\nconst _isHolidayOnly = (targetDate: Date) => {\n  let holiday = '';\n\n  for (let def of definitions) {\n    // 定義内かどうか\n    if (def[4] && targetDate.getFullYear() < def[4]) continue;\n    if (def[5] && def[5] < targetDate.getFullYear()) continue;\n    if (def[0] === 3 && targetDate.getFullYear() <= 1948) continue;\n    if (def[0] === 4 && targetDate.getFullYear() < 1948) continue;\n\n    // 日付指定\n    if (def[0] === 1) {\n      holiday = simpleHoliday(targetDate, def);\n      if (holiday) break;\n    }\n    // 週曜日指定\n    if (def[0] === 2) {\n      holiday = nthWeek(targetDate, def);\n      if (holiday) break;\n    }\n    // 春分の日\n    if (def[0] === 3) {\n      holiday = syunbun(targetDate, def);\n      if (holiday) break;\n    }\n    // 秋分の日\n    if (def[0] === 4) {\n      holiday = syuubun(targetDate, def);\n      if (holiday) break;\n    }\n  }\n  return holiday;\n};\n\nconst _isWorkingHoliday = (targetDate: Date) => {\n  let workingHoliday = '';\n\n  for (let def of _workingDefinitions) {\n    // 定義内かどうか\n    if (def[4] && targetDate.getFullYear() < def[4]) continue;\n    if (def[5] && def[5] < targetDate.getFullYear()) continue;\n\n    // 日付指定\n    if (def[0] === 1) {\n      workingHoliday = simpleHoliday(targetDate, def);\n      if (workingHoliday) break;\n    }\n    // 週曜日指定\n    if (def[0] === 2) {\n      workingHoliday = nthWeek(targetDate, def);\n      if (workingHoliday) break;\n    }\n    // 年月日指定\n    if (def[0] === 9) {\n      workingHoliday = arrayHoliday(targetDate, def);\n      if (workingHoliday) break;\n    }\n  }\n  return workingHoliday;\n};\n\n/**\n * 日付指定の祝日・休業日定義から、対象日付が祝日・休業日かどうかを返す\n * @param targetDate 対象日付\n * @param definition 祝日・休業日定義（年が範囲内であること）\n * @returns 祝日・休業日の場合は祝日・休業日名。それ以外は空文字。\n */\nconst simpleHoliday = (targetDate: Date, definition: Definition) => {\n  if (targetDate.getMonth() + 1 !== definition[2]) return '';\n  if (targetDate.getDate() !== definition[3]) return '';\n  // 月・日が一致している場合値を返す\n  return definition[1];\n};\n\n/**\n * 週曜日指定の祝日・休業日定義から、対象日付が祝日・休業日かどうかを返す\n * @param targetDate 対象日付\n * @param definition 祝日・休業日定義（年が範囲内であること）\n * @returns 祝日の場合は祝日名。それ以外は空文字。\n */\nconst nthWeek = (targetDate: Date, definition: Definition) => {\n  const compDate = getNthWeekDay(\n    targetDate.getFullYear(),\n    <number>definition[2]!,\n    (<number[]>definition[3])[0],\n    (<number[]>definition[3])[1]\n  );\n  if (targetDate.getMonth() !== compDate.getMonth()) return '';\n  if (targetDate.getDate() !== compDate.getDate()) return '';\n  return definition[1];\n};\n\n/**\n * 対象日付が春分の日かどうかを返す\n * @param targetDate 対象日付\n * @param definition 祝日定義（年が範囲内であること）\n * @returns 祝日の場合は祝日名。それ以外は空文字。\n */\nconst syunbun = (targetDate: Date, definition: Definition) => {\n  // 3月ではない場合処理しない\n  if (targetDate.getMonth() + 1 !== 3) return '';\n  // 1948年以前(1948年含む)は処理しない\n  if (targetDate.getFullYear() <= 1948) return '';\n\n  // 1980年以前は固定値計算\n  if (targetDate.getFullYear() < 1980) {\n    // http://www.asahi-net.or.jp/~ci5m-nmr/misc/equinox.html\n    // 20 - 1960, 1964, 1968, 1972, 1976\n    // 21 - others\n    const _20 = [1960, 1964, 1968, 1972, 1976];\n    if (targetDate.getDate() === 20 && _20.includes(targetDate.getFullYear())) {\n      return definition[1];\n    } else if (targetDate.getDate() === 21) {\n      return definition[1];\n    }\n    return '';\n  }\n\n  // 1980年以降\n  const d =\n    Math.floor(20.8431 + 0.242194 * (targetDate.getFullYear() - 1980)) -\n    Math.floor((targetDate.getFullYear() - 1980) / 4);\n  if (targetDate.getDate() === d) return definition[1];\n  return '';\n};\n\n/**\n * 対象日付が秋分の日かどうかを返す\n * @param targetDate 対象日付\n * @param definition 祝日定義（年が範囲内であること）\n * @returns 祝日の場合は祝日名。それ以外は空文字。\n */\nconst syuubun = (targetDate: Date, definition: Definition) => {\n  // 9月ではない場合処理しない\n  if (targetDate.getMonth() + 1 !== 9) return '';\n  // 1948年以前は処理しない\n  if (targetDate.getFullYear() < 1948) return '';\n\n  // 1980年以前は固定値計算\n  if (targetDate.getFullYear() < 1980) {\n    // http://www.asahi-net.or.jp/~ci5m-nmr/misc/equinox.html\n    // 24 - 1951, 1955, 1959, 1963, 1967, 1971, 1975, 1979\n    // 23 - others\n    const _24 = [1951, 1955, 1959, 1963, 1967, 1971, 1975, 1979];\n    if (targetDate.getDate() === 24 && _24.includes(targetDate.getFullYear())) {\n      return definition[1];\n    } else if (targetDate.getDate() === 23) {\n      return definition[1];\n    }\n    return '';\n  }\n\n  // 1980年以降\n  const d =\n    Math.floor(23.2488 + 0.242194 * (targetDate.getFullYear() - 1980)) -\n    Math.floor((targetDate.getFullYear() - 1980) / 4);\n  if (targetDate.getDate() === d) return definition[1];\n  return '';\n};\n\n/**\n * 配列指定の祝日・休業日定義から、対象日付が祝日・休業日かどうかを返す\n * @param targetDate\n * @param definition\n * @returns\n */\nconst arrayHoliday = (targetDate: Date, definition: Definition) => {\n  const dateString = formatDate(targetDate);\n  return (<string[]>definition[2]!).includes(dateString) ? definition[1] : '';\n};\n\n/**\n * 対象日付が振替休日かどうかを返す\n * @param targetDate 対象日付\n * @returns 祝日の場合は祝日名。それ以外は空文字。\n */\nconst furikae = (targetDate: Date) => {\n  const holiday = '振替休日';\n\n  // 1973年4月以前は対象外\n  if (targetDate.getFullYear() < 1973 || (targetDate.getFullYear() === 1973 && targetDate.getMonth() + 1 < 4))\n    return '';\n\n  // 連続して祝日を遡り、日曜が祝日かどうかを判定\n  let _tmpDate = new Date(targetDate.getTime());\n  let d = 0;\n  while (true) {\n    // 2007以前は月曜固定のため、複数日遡らない\n    if (targetDate.getFullYear() < 2007 && d === -1) return '';\n    // 日付をずらす\n    _tmpDate.setDate(targetDate.getDate() + --d);\n    // 祝日かどうか\n    const _holiday = _isHolidayOnly(_tmpDate);\n    // 祝日でなければ抜ける\n    if (!_holiday) return '';\n    // ずらした日付が日曜日の場合\n    if (_tmpDate.getDay() === 0) return holiday;\n  }\n};\n\n/**\n * 対象日付が国民の休日かどうかを返す\n * @param targetDate 対象日付\n * @returns 祝日の場合は祝日名。それ以外は空文字。\n */\nconst kokumin = (targetDate: Date) => {\n  const holiday = '国民の休日';\n\n  // 1986年以前は対象外\n  if (targetDate.getFullYear() < 1986) return '';\n\n  // 前日と翌日を取得\n  let beforeDate = new Date(targetDate.getTime());\n  beforeDate.setDate(targetDate.getDate() - 1);\n  let afterDate = new Date(targetDate.getTime());\n  afterDate.setDate(targetDate.getDate() + 1);\n\n  // 前日を翌日が祝日かどうか\n  if (_isHolidayOnly(beforeDate) && _isHolidayOnly(afterDate)) return holiday;\n  return '';\n};\n\n// ------------------------------------------------ util\n\n/**\n * Dateオブジェクトにして返す\n * @param date 日付\n * @returns Dateオブジェクト\n */\nconst convertStringDate = (date: string | Date) => {\n  const d = new Date(date);\n  if (!isNaN(d.getDate())) return d;\n  throw new Error('wrong date!');\n};\n\n/**\n * 日付をYYYY/MM/DD形式にして文字列で返す\n * @param date 対象日付\n * @returns YYYY/MM/DD形式の文字列\n */\nconst formatDate = (date: Date) => {\n  var y = date.getFullYear();\n  var m = ('00' + (date.getMonth() + 1)).slice(-2);\n  var d = ('00' + date.getDate()).slice(-2);\n  return y + '/' + m + '/' + d;\n};\n\n/**\n * 対象年月週曜日のDateオブジェクトを返す\n * @param year 対象の年\n * @param month 対象の月\n * @param nth 対象の週番号\n * @param day 対象の曜日（日:0〜土:6）\n * @returns 対象年月週曜日のDateオブジェクトを返す\n */\nconst getNthWeekDay = (year: number, month: number, nthWeek: number, day: number) => {\n  const date = new Date(year, month - 1, 1);\n  const s = day < date.getDay() ? 7 : 0;\n  const d = nthWeek * 7 + (s - date.getDay()) - 7 + day;\n  date.setDate(date.getDate() + d);\n  return date;\n};\n\n// ------------------------------------------------ export\n\n/**\n * 渡された日付が祝日かどうかを返す\n * ※ 休業日設定を設定している場合は、休業日も返す\n * @param date 対象日付\n * @returns 祝日の場合は祝日名。それ以外は空文字。\n */\nconst isHoliday = (date: string | Date): string => {\n  let holiday = '';\n\n  // Dateオブジェクト取得\n  const targetDate = convertStringDate(date);\n\n  // 祝日を判定\n  holiday = _isHolidayOnly(targetDate);\n  if (holiday) return holiday;\n\n  // 振替休日を判定\n  holiday = furikae(targetDate);\n  if (holiday) return holiday;\n\n  // 国民の休日を判定\n  holiday = kokumin(targetDate);\n  if (holiday) return holiday;\n\n  // 休業日が設定されていた場合、判定\n  if (_workingDefinitions) {\n    holiday = _isWorkingHoliday(targetDate);\n    if (holiday) return holiday;\n  }\n\n  return holiday;\n};\n\n/**\n * 休業日を設定する\n * @param workingDefinitions 休業日設定\n */\nconst setWorkingDefinitions = (workingDefinitions: Definitions) => {\n  _workingDefinitions = workingDefinitions;\n};\n\nexport default { isHoliday, setWorkingDefinitions };\n"],"names":["definitions","_workingDefinitions","_isHolidayOnly","targetDate","holiday","def","simpleHoliday","nthWeek","syunbun","syuubun","_isWorkingHoliday","workingHoliday","arrayHoliday","definition","compDate","getNthWeekDay","_20","d","_24","dateString","formatDate","furikae","_tmpDate","kokumin","beforeDate","afterDate","convertStringDate","date","y","m","year","month","day","isHoliday","setWorkingDefinitions","workingDefinitions","holidaysJp"],"mappings":"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"}